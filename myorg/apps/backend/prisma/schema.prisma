generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  username            String              @unique
  email               String              @unique
  password            String
  phone               String?
  profile_image       String?
  role_id             Int                 @map("role_id") // Clave foránea
  areas_operator_id   Int?                // Puede ser nulo si no es operador

  role                Role                @relation(fields: [role_id], references: [id]) // Relación con Role
  areasOperator       AreasOperator?      @relation(fields: [areas_operator_id], references: [id]) // Relación con area si es operador

  created_at      DateTime            @default(now()) @map("created_at")
  updated_at      DateTime            @updatedAt @map("updated_at")

  @@map("users")
}

model Role {
  id              Int                 @id @default(autoincrement())
  name            String              @unique

  users           User[]              // Relación inversa con User
  permissions     ModulePermission[]  // Relación inversa con ModulePermission

  created_at      DateTime            @default(now()) @map("created_at")
  updated_at      DateTime            @updatedAt @map("updated_at")

  @@map("roles")
}

model AreasOperator {
  id              Int                 @id @default(autoincrement())
  name            String              @unique

  users           User[]              //Relacion con User si aplica 
  
  @@map("areas_operator")
}

model Module {
  id              Int                 @id @default(autoincrement())
  name            String              @unique
  description     String              //Nombre del modulo permitido
  imageName       String              
  logoName        String              
  
  permissions     ModulePermission[]  // Relacion con permisos 

  created_at      DateTime            @default(now()) @map("created_at")
  updated_at      DateTime            @updatedAt @map("updated_at")

  @@map("modules")
}

model ModulePermission {
  id              Int                 @id @default(autoincrement())
  role_id         Int                 
  module_id       Int                 //Nombre del modulo permitido
  enabled         Boolean             @default(true) //para activar o desactivar el modulo por rol
  
  role            Role                @relation(fields: [role_id], references: [id], onDelete: Cascade)
  module          Module              @relation(fields: [module_id], references: [id], onDelete: Cascade)

  created_at      DateTime            @default(now()) @map("created_at")
  updated_at      DateTime            @updatedAt @map("updated_at")

  @@unique([module_id, role_id])      //Para no tener un mismo rol con permisos duplicados
  @@map("module_permissions")
}